This file include the extra steps to perform when one
new MAJOR (X.Y) release is about to be performed.

In order to procced, simply follow the steps defined
for normal weeklies and, at the given points, execute
the steps detailed in the 2 sections below:

Note, try not to copy/paste the commands but write them
as it's extremely easy to end with "X.Y" tags, branches
and friends ;-)

20110701 first version - Eloy Lafuente (stronk7)

========== ========== ========== ==========

A) STEPS FOR MAJOR RELEASE


1) Change master version.php to:

$version  = YYYYMMDD00.00; // CHANGEMETORELEASEDATE = branching date YYYYMMDD - do not modify!
$release  = 'X.Y (Build: YYYYMMDD)';
$branch   = 'XY';
$maturity = MATURITY_STABLE;

2) Commit it with message "Moodle release X.Y"

3) git tag -a vX.Y.0 -m MOODLE_XY <COMMITID> (we don't delay
   tagging. If there is need to repackage, next minor release
   X.Y.1 will be done - agreed @ HQ chat).

4) git branch MOODLE_XY_STABLE

5) Change master version.php to:

$version  = YYYYMMDD00.00; // YYYYMMDD = weekly release date of this DEV branch
$release  = 'X.Y+1dev (Build: YYYYMMDD)';
$branch   = 'XY+1';
$maturity = MATURITY_ALPHA;

6) Commit it with message "weekly release X.Y+1dev"

7) git push [integration_remote] MOODLE_XY_STABLE && git push [integration_remote] --tags

8) git push [integration_remote] master

9) Add support for the new branch in all the mdlrelease scripts used (master branch only):
    - install_mirror.sh
    - gitmirror.sh
    - cvsmirror.sh
    - checkcvsmirror.sh

10) Create a new repo, view and jobs (clonig from master) in the Jenkins servers, so the new branch
    becomes tested by 1st time.

11) Verify integration.git looks 100% perfect before continue

12) Done! A) STEPS Ok. Go back to next step in weeklybuild.txt
